# -*- coding: utf-8 -*-
"""Pharma_drug_sale.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QGdXKvq0O1T1a05VAQoEMKeR6o_SekpD

**Importing Libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

sns.set_theme()

"""**Load Data**"""

sales_hourly = pd.read_csv("saleshourly.csv")
sales_daily = pd.read_csv("salesdaily.csv")
sales_weekly = pd.read_csv("salesweekly.csv")
sales_monthly = pd.read_csv("salesmonthly.csv")

"""**Data Overview**"""

print("Hourly Sales Data:")
print(sales_hourly.head(), "\n")

print("Daily Sales Data:")
print(sales_daily.head(), "\n")

print("Weekly Sales Data:")
print(sales_weekly.head(), "\n")

print("Monthly Sales Data:")
print(sales_monthly.head(), "\n")

# Check missing values
print("Missing Values Summary:")

print("\nHourly Data:")
print(sales_hourly.isnull().sum())

print("\nDaily Data:")
print(sales_daily.isnull().sum())

print("\nWeekly Data:")
print(sales_weekly.isnull().sum())

print("\nMonthly Data:")
print(sales_monthly.isnull().sum())

"""**Data Cleaning**"""

# Convert date/time columns (assuming columns named 'Date' or 'Datetime')
for df in [sales_hourly, sales_daily, sales_weekly, sales_monthly]:
    for col in df.columns:
        if "datum" in col.lower():
            df[col] = pd.to_datetime(df[col], errors="coerce")

# Fill missing sales values with 0 (if any)
for df in [sales_hourly, sales_daily, sales_weekly, sales_monthly]:
    # Identify columns that are not 'datum' and are numerical (potential sales columns)
    sales_cols = df.select_dtypes(include=np.number).columns.difference(['Year', 'Month', 'Hour', 'Week'])
    df[sales_cols] = df[sales_cols].fillna(0)

"""**Exploratory Data Analysis**"""

# Sum all drug columns to get total sales
drug_columns = [col for col in sales_daily.columns if col not in ['datum', 'Year', 'Month', 'Hour', 'Weekday Name']]
sales_daily['Total_Sales'] = sales_daily[drug_columns].sum(axis=1)
sales_monthly['Total_Sales'] = sales_monthly[drug_columns].sum(axis=1)
sales_weekly['Total_Sales'] = sales_weekly[drug_columns].sum(axis=1)
sales_hourly['Total_Sales'] = sales_hourly[drug_columns].sum(axis=1)

# ---- Daily Trend ----
if "Total_Sales" in sales_daily.columns:
    plt.figure(figsize=(12,5))
    plt.plot(sales_daily["datum"], sales_daily["Total_Sales"], marker="o")
    plt.title("Daily Sales Trend")
    plt.xlabel("Date")
    plt.ylabel("Sales")
    plt.xticks(rotation=45)
    plt.show()

if "Total_Sales" in sales_monthly.columns:
    fig = px.bar(sales_monthly, x=sales_monthly.columns[0], y="Total_Sales",
                 title="Monthly Sales Trend", text="Total_Sales")
    fig.show()

# ---- Hourly Heatmap (if columns exist) ----
if "Hour" in sales_hourly.columns and "Total_Sales" in sales_hourly.columns:
    plt.figure(figsize=(10,6))
    sales_hourly['Date'] = sales_hourly['datum'].dt.date
    hourly_pivot = sales_hourly.pivot_table(values="Total_Sales", index="Date", columns="Hour", aggfunc="sum")
    sns.heatmap(
        hourly_pivot,
        cmap="Blues"
    )
    plt.title("Hourly Sales Heatmap")
    plt.show()

# ---- Weekly Analysis ----
if "Total_Sales" in sales_weekly.columns:
    plt.figure(figsize=(8,5))
    # Assuming 'datum' column in sales_weekly represents the end of the week
    sales_weekly['Week'] = sales_weekly['datum'].dt.isocalendar().week
    sns.barplot(x="Week", y="Total_Sales", data=sales_weekly, palette="coolwarm")
    plt.title("Weekly Sales Comparison")
    plt.xticks(rotation=45)
    plt.show()

"""**Insights**"""

print("ðŸ“Š Key Insights:")
if "Total_Sales" in sales_daily.columns:
    max_day = sales_daily.loc[sales_daily["Total_Sales"].idxmax()]
    print(f"ðŸ”¹ Highest Daily Sales: {max_day['Total_Sales']:.2f} on {max_day['datum'].strftime('%Y-%m-%d')}")

if "Total_Sales" in sales_monthly.columns:
    max_month = sales_monthly.loc[sales_monthly["Total_Sales"].idxmax()]
    print(f"ðŸ”¹ Highest Monthly Sales: {max_month['Total_Sales']:.2f} in {max_month['datum'].strftime('%Y-%m')}")

if "Total_Sales" in sales_weekly.columns:
    max_week = sales_weekly.loc[sales_weekly["Total_Sales"].idxmax()]
    print(f"ðŸ”¹ Highest Weekly Sales: {max_week['Total_Sales']:.2f} in Week {max_week['Week']} of {max_week['datum'].year}")

"""**Feature Engineering**"""

def add_time_features(df, date_col):
    df["Year"] = df[date_col].dt.year
    df["Month"] = df[date_col].dt.month
    df["Day"] = df[date_col].dt.day
    df["Weekday"] = df[date_col].dt.day_name()
    if "Hour" not in df.columns:
        try:
            df["Hour"] = df[date_col].dt.hour
        except:
            pass
    return df

sales_daily = add_time_features(sales_daily, sales_daily.columns[0])

"""**Descriptive Statistics**"""

print("Descriptive Stats (Daily Sales):")
print(sales_daily["Total_Sales"].describe())

print("\nAverage Sales per Weekday:")
print(sales_daily.groupby("Weekday")["Total_Sales"].mean().sort_values(ascending=False))

print("\nTotal Sales per Month:")
print(sales_daily.groupby("Month")["Total_Sales"].sum())

"""**Advanced Analysis**"""

# Moving Average (7-day)
if "Total_Sales" in sales_daily.columns:
    sales_daily["7D_MA"] = sales_daily["Total_Sales"].rolling(window=7).mean()

    plt.figure(figsize=(12,5))
    plt.plot(sales_daily["datum"], sales_daily["Total_Sales"], label="Daily Sales")
    plt.plot(sales_daily["datum"], sales_daily["7D_MA"], label="7-Day Moving Avg", color="red")
    plt.legend()
    plt.title("Daily Sales with 7-Day Moving Average")
    plt.show()

# --- Sales by Weekday ---
if "Total_Sales" in sales_daily.columns and "Weekday" in sales_daily.columns:
    plt.figure(figsize=(8,5))
    sns.barplot(x="Weekday", y="Total_Sales", data=sales_daily, estimator="mean", palette="coolwarm", hue="Weekday", legend=False,
                order=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"])
    plt.title("Average Sales by Weekday")
    plt.xticks(rotation=45)
    plt.show()

# --- Monthly Sales Trend ---
if "Total_Sales" in sales_daily.columns and "Month" in sales_daily.columns:
    monthly_sales = sales_daily.groupby("Month")["Total_Sales"].sum()
    plt.figure(figsize=(8,5))
    monthly_sales.plot(kind="bar", color="skyblue")
    plt.title("Total Monthly Sales")
    plt.ylabel("Sales")
    plt.show()

"""**Correlation & Heatmaps**"""

plt.figure(figsize=(8,6))
sns.heatmap(
    sales_daily.corr(numeric_only=True),
    annot=True,
    cmap="coolwarm",
    fmt=".2f",
    annot_kws={"size":8},   # smaller text size
    cbar_kws={'shrink': 0.8}
)
plt.title("Correlation Matrix (Daily Sales Features)")
plt.tight_layout()
plt.show()

"""**Key Insights**"""

print(f"Highest Sales Day: {sales_daily.loc[sales_daily['Total_Sales'].idxmax()].to_dict()}")
print(f"Lowest Sales Day: {sales_daily.loc[sales_daily['Total_Sales'].idxmin()].to_dict()}")
print(f"Best Performing Month: {monthly_sales.idxmax()} with {monthly_sales.max()} sales")
print(f"Worst Performing Month: {monthly_sales.idxmin()} with {monthly_sales.min()} sales")